name: CI

on:
  push:
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Run from the repo root now that go.mod is at top level
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@<commit-sha>

      - name: Set up Go
        uses: actions/setup-go@<commit-sha>
        with:
          go-version: "1.25.x"
          check-latest: true
          cache: true
          cache-dependency-path: go.sum

      - name: Verify formatting (gofmt)
        run: |
          unformatted=$(gofmt -l .)
          if [[ -n "$unformatted" ]]; then
            echo "These files are not gofmt-formatted:"
            echo "$unformatted"
            echo "Run: gofmt -w ."
            echo "Diff:"
            for f in $unformatted; do
              echo "---- $f"
              diff -u "$f" <(gofmt "$f") || true
            done
            exit 1
          fi

      - name: Tidy (verify no changes)
        run: |
          set -euo pipefail
          cp go.mod go.mod.orig
          had_go_sum=0
          if [[ -f go.sum ]]; then
            cp go.sum go.sum.orig
            had_go_sum=1
          fi
          if ! go mod tidy; then
            echo "'go mod tidy' failed"
            mv -f go.mod.orig go.mod
            if [[ $had_go_sum -eq 1 ]]; then mv -f go.sum.orig go.sum; else rm -f go.sum || true; fi
            exit 1
          fi
          tidy_ok=0
          diff -u go.mod.orig go.mod || tidy_ok=1
          if [[ $had_go_sum -eq 1 ]]; then
            diff -u go.sum.orig go.sum || tidy_ok=1
          else
            [[ -f go.sum ]] && tidy_ok=1
          fi
          mv -f go.mod.orig go.mod
          if [[ $had_go_sum -eq 1 ]]; then mv -f go.sum.orig go.sum; else rm -f go.sum || true; fi
          if [[ $tidy_ok -ne 0 ]]; then
            echo "go.mod/go.sum would change. Run 'go mod tidy' locally and commit."
            exit 1
          fi

      - name: Vet
        run: go vet -mod=readonly ./...

      - name: Build
        run: go build -mod=readonly ./...

      - name: Test (race, coverage)
        run: go test -mod=readonly -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@<commit-sha>
        with:
          name: coverage
          path: coverage.out
          if-no-files-found: ignore
